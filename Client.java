/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

/**
 *
 * @author grant
 */
public class Client extends javax.swing.JFrame {
    String seperator = "@@";
    public Socket socket;
    public boolean connected = false;
    
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        txtInput1 = new javax.swing.JTextArea();
        lblIP = new javax.swing.JLabel();
        txtIP = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        lblPort = new javax.swing.JLabel();
        lblServer = new javax.swing.JLabel();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        lblPin = new javax.swing.JLabel();
        lblPinX = new javax.swing.JLabel();
        txtPinX = new javax.swing.JTextField();
        lblPinY = new javax.swing.JLabel();
        txtPinY = new javax.swing.JTextField();
        btnUnpin = new javax.swing.JButton();
        btnPin = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextArea();
        lblInput = new javax.swing.JLabel();
        lblPostX = new javax.swing.JLabel();
        lblPostY = new javax.swing.JLabel();
        txtPostX = new javax.swing.JTextField();
        txtPostY = new javax.swing.JTextField();
        lblPost = new javax.swing.JLabel();
        txtPostHeight = new javax.swing.JTextField();
        txtPostWidth = new javax.swing.JTextField();
        lblPostHeight = new javax.swing.JLabel();
        lblPostWidth = new javax.swing.JLabel();
        txtPostColor = new javax.swing.JTextField();
        lblPostColor = new javax.swing.JLabel();
        lblPost1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        lblOutput = new javax.swing.JLabel();
        lblGetColor = new javax.swing.JLabel();
        txtGetContains = new javax.swing.JTextField();
        txtGetColor = new javax.swing.JTextField();
        lblGetContains = new javax.swing.JLabel();
        lblGetRefers = new javax.swing.JLabel();
        txtGetRefers = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        btnShake = new javax.swing.JButton();
        btnGetPins = new javax.swing.JButton();
        btnGetNote = new javax.swing.JButton();
        btnPost = new javax.swing.JButton();

        txtInput1.setColumns(20);
        txtInput1.setRows(5);
        jScrollPane2.setViewportView(txtInput1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblIP.setText("IP Address:");

        txtIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIPActionPerformed(evt);
            }
        });

        txtPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPortActionPerformed(evt);
            }
        });

        lblPort.setText("Port Number:");

        lblServer.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblServer.setText("Server Information");

        btnConnect.setBackground(new java.awt.Color(0, 204, 0));
        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnDisconnect.setBackground(new java.awt.Color(255, 51, 51));
        btnDisconnect.setText("Disconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        lblPin.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPin.setText("Pin");

        lblPinX.setText("X Coordinate:");

        lblPinY.setText("Y Coordinate:");

        btnUnpin.setText("Unpin");
        btnUnpin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnpinActionPerformed(evt);
            }
        });

        btnPin.setText("Pin");
        btnPin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPinActionPerformed(evt);
            }
        });

        txtInput.setColumns(20);
        txtInput.setRows(5);
        jScrollPane1.setViewportView(txtInput);

        lblInput.setText("Message:");

        lblPostX.setText("X Coordinate:");

        lblPostY.setText("Y Coordinate:");

        lblPost.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPost.setText("Post Note");

        txtPostWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPostWidthActionPerformed(evt);
            }
        });

        lblPostHeight.setText("Height:");

        lblPostWidth.setText("Width:");

        lblPostColor.setText("Color:");

        lblPost1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPost1.setText("Get Note");

        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        jScrollPane3.setViewportView(txtOutput);

        lblOutput.setText("Output:");

        lblGetColor.setText("Color:");

        lblGetContains.setText("Contains:");

        lblGetRefers.setText("Refers to:");

        btnClear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnShake.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnShake.setText("Shake");
        btnShake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShakeActionPerformed(evt);
            }
        });

        btnGetPins.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGetPins.setText("Get Pins");
        btnGetPins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetPinsActionPerformed(evt);
            }
        });

        btnGetNote.setText("Get Note Information");
        btnGetNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetNoteActionPerformed(evt);
            }
        });

        btnPost.setText("Post");
        btnPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPostActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPost1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPost, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(btnShake, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnGetPins, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDisconnect)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnConnect))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(lblPort, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblIP, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(69, 69, 69))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnPost)
                                .addGap(83, 83, 83)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblPinX)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtPinX))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblPinY)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnUnpin)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                            .addComponent(btnPin, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtPinY))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblInput))))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(btnGetNote))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPostY)
                            .addComponent(lblPostX)
                            .addComponent(lblPostWidth)
                            .addComponent(lblPostHeight)
                            .addComponent(lblPostColor)
                            .addComponent(lblGetColor)
                            .addComponent(lblGetContains)
                            .addComponent(lblGetRefers))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtPostY, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtGetColor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtGetRefers, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtGetContains, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtPostX, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtPostHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPostWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(txtPostColor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOutput)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(lblServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPin, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblServer)
                    .addComponent(lblPin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPinX)
                    .addComponent(txtPinX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPort, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPinY)
                    .addComponent(txtPinY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(btnDisconnect)
                    .addComponent(btnUnpin)
                    .addComponent(btnPin))
                .addGap(23, 23, 23)
                .addComponent(lblPost)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPostX)
                            .addComponent(txtPostX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPostY)
                            .addComponent(txtPostY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPostHeight)
                            .addComponent(txtPostHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPostWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPostWidth))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPostColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPostColor))
                        .addGap(18, 18, 18)
                        .addComponent(btnPost))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblInput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addComponent(lblPost1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblOutput)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGetContains, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGetContains))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtGetColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGetColor))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGetRefers)
                            .addComponent(txtGetRefers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnGetNote))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShake, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGetPins, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void txtIPActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    private void txtPortActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void txtPostWidthActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void btnUnpinActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String x, y;
        try {
            x = String.valueOf(Integer.parseInt(txtPinX.getText()));
            y = String.valueOf(Integer.parseInt(txtPinY.getText()));
            
            PrintWriter output = new PrintWriter(socket.getOutputStream(), 
                                                                          true);
            BufferedReader input = new BufferedReader(new 
                                    InputStreamReader(socket.getInputStream()));
            String message = "UNPIN" + seperator + x + seperator + y;
            output.println(message);
            String response = input.readLine();
            
            txtOutput.setText(response);
            
        } catch (IOException | NumberFormatException e) {
            txtOutput.setText("Pin unsuccessful");
        }
    }                                        

    private void btnPinActionPerformed(java.awt.event.ActionEvent evt) {                                       
        String x, y;
        try {
            x = String.valueOf(Integer.parseInt(txtPinX.getText()));
            y = String.valueOf(Integer.parseInt(txtPinY.getText()));
            System.out.println("a");
            PrintWriter output = new PrintWriter(socket.getOutputStream(), 
                                                                          true);
            System.out.println("b");
            BufferedReader input = new BufferedReader(new 
                                    InputStreamReader(socket.getInputStream()));
            
            System.out.println("c");
            String message = "PIN" + seperator + x + seperator + y;
            output.println(message);
            System.out.println("d");
            String response = input.readLine();
            System.out.println("e");
            txtOutput.setText(response);
            
        } catch (IOException | NumberFormatException | NullPointerException e) {
            txtOutput.setText("Pin unsuccessful");
        }
    }                                      

    private void btnShakeActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try {
            PrintWriter output = new PrintWriter(socket.getOutputStream(), 
                                                                          true);
            BufferedReader input = new BufferedReader(new 
                                    InputStreamReader(socket.getInputStream()));
            String message = "SHAKE";
            output.println(message);
            String response = input.readLine();
            
            txtOutput.setText(response);
            
        } catch (IOException | NullPointerException e){
        }
    }                                        

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try {
            PrintWriter output = new PrintWriter(socket.getOutputStream(), 
                                                                          true);
            BufferedReader input = new BufferedReader(new 
                                    InputStreamReader(socket.getInputStream()));
            String message = "CLEAR";
            output.println(message);
            String response = input.readLine();
            
            txtOutput.setText(response);
            
        } catch (IOException | NullPointerException e){
        }
    }                                        

    private void btnGetPinsActionPerformed(java.awt.event.ActionEvent evt) {                                           
        try {
            PrintWriter output = new PrintWriter(socket.getOutputStream(), 
                                                                          true);
            BufferedReader input = new BufferedReader(new 
                                    InputStreamReader(socket.getInputStream()));
            String message = "GET PINS";
            output.println(message);
            String response = input.readLine();
            
            if (response.equals("")) {
		txtOutput.setText("There are currrently no pins on the board.");
                
            } else {
                txtOutput.setText(response);
            }
	} catch (IOException | NullPointerException e) {
	}
    }                                          

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {                                           
        String ip;
        int port;
        
        try {
            port = Integer.parseInt(txtPort.getText()); 
            ip = txtIP.getText();
            
            if (!connected) {
                socket = new Socket(ip, port);
                if (socket.isConnected()) {
                    txtOutput.setText("You have succesfully connected to "
                                                              + "the server.");
                    connected = true;
                }
            } else {
                txtOutput.setText("You are already connected to \nthe specified "
                                                                   + "server.");
            }
        } catch (NumberFormatException | IOException | NullPointerException e) {
            txtOutput.setText("Connection failed. Please check your \nentered "
                                                + "information and try again.");
        }
    }                                          

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {                                              
        try {
            socket.close();
	    txtOutput.setText("Disconnected successfully.");
            connected = false;
        } catch (IOException e) {
            txtOutput.setText("Disconnecting from the server failed.");
	} catch (NullPointerException e1) {
            txtOutput.setText("You are not connected to the server.");
        }
    }                                             

    private void btnPostActionPerformed(java.awt.event.ActionEvent evt) {                                        
        String c, x, y, h, w, p;
        
        try{
            x = String.valueOf(Integer.parseInt(txtPostX.getText()));
            y = String.valueOf(Integer.parseInt(txtPostY.getText()));
            h = String.valueOf(Integer.parseInt(txtPostHeight.getText()));
            w = String.valueOf(Integer.parseInt(txtPostWidth.getText()));
            c = txtPostColor.getText();
            p = txtInput.getText();
            
            if (x.equals("") || y.equals("") || h.equals("") || w.equals("") 
                                                             || c.equals("")) {
                txtOutput.setText("Given input invalid or empty.");
                
            } else {
                PrintWriter output = new PrintWriter(socket.getOutputStream(), 
                                                                         true);
                BufferedReader input = new BufferedReader(new 
                                   InputStreamReader(socket.getInputStream()));

                String message = "POST" + seperator + x + seperator + y + seperator + h + 
                                  seperator + w + seperator + c + seperator + p;
                
                output.println(message);
                String response = input.readLine();
                txtOutput.setText(response);
            }
            
        } catch (NumberFormatException e){
            txtOutput.setText("Given input invalid or empty.");
        } catch (IOException | NullPointerException e1) {
        }
    }                                       

    private void btnGetNoteActionPerformed(java.awt.event.ActionEvent evt) {                                           
       String contains, color, refers;
       
       contains = txtGetContains.getText();
       color = txtGetColor.getText();
       refers = txtGetRefers.getText();
       
       
        try {
            PrintWriter output = new PrintWriter(socket.getOutputStream(), 
                                                                         true);
            BufferedReader input = new BufferedReader(new 
                                    InputStreamReader(socket.getInputStream()));
            String message = "GET" + seperator + "color=" + color + 
                        seperator + "refers to=" + refers + seperator 
                                                       + "contains=" + contains;
            output.println(message);
            String response = input.readLine();
            txtOutput.setText(response);
                
        } catch (IOException | NullPointerException e) {
        }
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnGetNote;
    private javax.swing.JButton btnGetPins;
    private javax.swing.JButton btnPin;
    private javax.swing.JButton btnPost;
    private javax.swing.JButton btnShake;
    private javax.swing.JButton btnUnpin;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblGetColor;
    private javax.swing.JLabel lblGetContains;
    private javax.swing.JLabel lblGetRefers;
    private javax.swing.JLabel lblIP;
    private javax.swing.JLabel lblInput;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JLabel lblPin;
    private javax.swing.JLabel lblPinX;
    private javax.swing.JLabel lblPinY;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblPost;
    private javax.swing.JLabel lblPost1;
    private javax.swing.JLabel lblPostColor;
    private javax.swing.JLabel lblPostHeight;
    private javax.swing.JLabel lblPostWidth;
    private javax.swing.JLabel lblPostX;
    private javax.swing.JLabel lblPostY;
    private javax.swing.JLabel lblServer;
    private javax.swing.JTextField txtGetColor;
    private javax.swing.JTextField txtGetContains;
    private javax.swing.JTextField txtGetRefers;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextArea txtInput;
    private javax.swing.JTextArea txtInput1;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextField txtPinX;
    private javax.swing.JTextField txtPinY;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtPostColor;
    private javax.swing.JTextField txtPostHeight;
    private javax.swing.JTextField txtPostWidth;
    private javax.swing.JTextField txtPostX;
    private javax.swing.JTextField txtPostY;
    // End of variables declaration                   
}
